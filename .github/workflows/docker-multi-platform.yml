name: Build and Push Multi-Platform Docker Images

on:
  push:
    branches:
      - master
      - github-actions-docker-build
    tags:
      - "v*.*.*"

env:
  REGISTRY: ghcr.io/pontoon-data/Pontoon
  IMAGE_VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          # - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/pontoon-api
            ${{ env.REGISTRY }}/pontoon-frontend
            ${{ env.REGISTRY }}/pontoon-worker
            ${{ env.REGISTRY }}/pontoon-beat
            ${{ env.REGISTRY }}/pontoon-unified
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Build and push frontend
      - name: Build and push frontend
        id: build-frontend
        uses: docker/build-push-action@v6
        with:
          context: ./web-app/pontoon
          file: web-app/pontoon/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/pontoon-frontend,push-by-digest=true,name-canonical=true,push=true

      # Build and push api
      - name: Build and push api
        id: build-api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: api/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/pontoon-api,push-by-digest=true,name-canonical=true,push=true

      # Build and push worker
      - name: Build and push worker
        id: build-worker
        uses: docker/build-push-action@v6
        with:
          context: data-transfer/pontoon
          file: data-transfer/pontoon/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/pontoon-worker,push-by-digest=true,name-canonical=true,push=true

      # Build and push beat
      - name: Build and push beat
        id: build-beat
        uses: docker/build-push-action@v6
        with:
          context: data-transfer/pontoon
          file: data-transfer/pontoon/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/pontoon-beat,push-by-digest=true,name-canonical=true,push=true

      # Build and push unified image
      - name: Build and push unified
        id: build-unified
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/pontoon-unified,push-by-digest=true,name-canonical=true,push=true

      # Export digests
      - name: Export digests
        run: |
          mkdir -p ${{ runner.temp }}/digests
          echo "${{ steps.build-frontend.outputs.digest }}" > ${{ runner.temp }}/digests/frontend-${{ env.PLATFORM_PAIR }}.digest
          echo "${{ steps.build-api.outputs.digest }}" > ${{ runner.temp }}/digests/api-${{ env.PLATFORM_PAIR }}.digest
          echo "${{ steps.build-worker.outputs.digest }}" > ${{ runner.temp }}/digests/worker-${{ env.PLATFORM_PAIR }}.digest
          echo "${{ steps.build-beat.outputs.digest }}" > ${{ runner.temp }}/digests/beat-${{ env.PLATFORM_PAIR }}.digest
          echo "${{ steps.build-unified.outputs.digest }}" > ${{ runner.temp }}/digests/unified-${{ env.PLATFORM_PAIR }}.digest

      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/pontoon-api
            ${{ env.REGISTRY }}/pontoon-frontend
            ${{ env.REGISTRY }}/pontoon-worker
            ${{ env.REGISTRY }}/pontoon-beat
            ${{ env.REGISTRY }}/pontoon-unified
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Manifest for frontend
        run: |
          digests=""
          for f in "${{ runner.temp }}/digests/frontend-"*.digest; do
            digest=$(cat "$f")
            digests="$digests $digest"
          done

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/pontoon-frontend:latest \
            $digests

      - name: Create and Push Manifest for api
        run: |
          digests=""
          for f in "${{ runner.temp }}/digests/api-"*.digest; do
            digest=$(cat "$f")
            digests="$digests $digest"
          done

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/pontoon-api:latest \
            $digests

      - name: Create and Push Manifest for worker
        run: |
          digests=""
          for f in "${{ runner.temp }}/digests/worker-"*.digest; do
            digest=$(cat "$f")
            digests="$digests $digest"
          done

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/pontoon-worker:latest \
            $digests

      - name: Create and Push Manifest for beat
        run: |
          digests=""
          for f in "${{ runner.temp }}/digests/beat-"*.digest; do
            digest=$(cat "$f")
            digests="$digests $digest"
          done

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/pontoon-beat:latest \
            $digests

      - name: Create and Push Manifest for unified
        run: |
          digests=""
          for f in "${{ runner.temp }}/digests/unified-"*.digest; do
            digest=$(cat "$f")
            digests="$digests $digest"
          done

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/pontoon-unified:latest \
            $digests

      - name: Inspect frontend
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/pontoon-frontend:${{ steps.meta.outputs.version }}

      - name: Inspect api
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/pontoon-api:${{ steps.meta.outputs.version }}

      - name: Inspect worker
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/pontoon-worker:${{ steps.meta.outputs.version }}

      - name: Inspect beat
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/pontoon-beat:${{ steps.meta.outputs.version }}

      - name: Inspect unified
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/pontoon-unified:${{ steps.meta.outputs.version }}
